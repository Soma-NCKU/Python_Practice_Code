# -*- coding: utf-8 -*-
"""
Created on Thu Dec 10 14:28:31 2020

Reference Textbook : Python Machine Learning 
                Sebastian & vahid
                
"""

# Training a Logistic regession model with scikit learn 
# ============================================================================

# Dataset download
from sklearn import datasets
import numpy as np

iris = datasets.load_iris()
X = iris.data[:, [2,3]]
y = iris.target
print('Class labels:', np.unique(y))

# Split the dataset
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 1, stratify = y)

# Standarize the dataset (Normalization)
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
sc.fit(X_train)
X_train_std = sc.transform(X_train)
X_test_std = sc.transform(X_test)

# Import the class function from the Linear Model which contains the cost function(SSE) and optimization function(Lrgd)
from sklearn.linear_model import LogisticRegression
lr = LogisticRegression(C = 100.0, random_state = 1)
lr.fit(X_train_std, y_train)

# ============================================================================
# Visualization and plot the boundary decision (Convergence Plot)

import matplotlib.pyplot as plt
from matplotlib.colors import ListedColormap

def plot_decision_regions(X, y, classifier, test_idx = None, resolution = 0.02):
    
    # setup marker generator and color map
    markers = ('s', 'x', 'o', '^', 'v')
    colors = ('red', 'blue', 'lightgreen', 'gray', 'cyan')
    cmap = ListedColormap(colors[:len(np.unique(y))])
    
    # plot the decision surface
    
    x1_min, x1_max = X[:, 0].min() - 1, X[:, 0].max() + 1
    x2_min, x2_max = X[:, 1].min() - 1, X[:, 1].max() + 1
    
## determine the minimum and maximum values for the two features 
## and use those features vectors to create a pair of grid arrays xx1 and xx2

    xx1, xx2 = np.meshgrid(np.arange(x1_min, x1_max, resolution),
                           np.arange(x2_min, x2_max, resolution))
## Since we trained preceptron classifier on two feature dimensions, we 
## need to flatten the grid arrays and create a matrix that has the same 
## number of columns as the Iris training subset so that we can use the 
## predict method to predict the class labels Z of the corresponding grid points.

    Z = classifier.predict(np.array([xx1.ravel(), xx2.ravel()]).T)
    Z = Z.reshape(xx1.shape)
    plt.contourf(xx1, xx2, Z, alpha=0.3, cmap=cmap)
    plt.xlim(xx1.min(), xx1.max())
    plt.ylim(xx2.min(), xx2.max())
    
    # plot class samples
    for idx, cl in enumerate(np.unique(y)):
        plt.scatter(x=X[y == cl, 0],
                    y=X[y == cl, 1],
                    alpha=0.8,
                    c=colors[idx],
                    marker=markers[idx],
                    label=cl,
                    edgecolor='black')
        
    # highlight test samples
    if test_idx:
        # plot all samples
        X_test = X[test_idx, :]
        plt.scatter(X_test[:, 0], X_test[:, 1], c = '', edgecolor = 'black', alpha = 1.0,
                    linewidth = 1, marker = 'o', s = 100, label = 'test set')


# stack the train and test data together for comparison
X_combined_std = np.vstack((X_train_std, X_test_std))
y_combined = np.hstack((y_train, y_test))

plot_decision_regions(X_combined_std, y_combined, classifier = lr, test_idx=range(105,150))

plt.xlabel('petal length [standardized]')
plt.ylabel('petal width [standardized]') 
plt.legend(loc = 'upper left')
plt.show()   
        
# ============================================================================

y_pred = lr.predict(X_test_std)
print('Misclassified samples: %d' %(y_test != y_pred).sum())

# misclassification error = 1/45 ~ 0.0222 = 2.22%
# 1 - 0.022 = 0.978 or 97.8% accuracy rate

from sklearn.metrics import accuracy_score
print('Accuracy: %0.2f' % accuracy_score(y_test, y_pred))

# Alternatively, each classifier in scikit-learn has a score method, as shown below
print('Accuracy: %0.2f' % lr.score(X_test_std, y_test))


# A classifier must implement -- fir, predict and score ************
