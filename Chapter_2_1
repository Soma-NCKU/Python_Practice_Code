# -*- coding: utf-8 -*-
"""
Created on Tue Nov  3 16:49:12 2020

Reference Text : Python Machine Learning -
Sebastian & vahid
"""
import numpy as np

class Perceptron():
    """Perceptron classifier.
    Parameters
    ----------
    eta : float
        learning rate (between 0.0 and 1.0)
    n_iter : int
        Passes over the training dataset (which is number of epochs).
    random_state : int
        Random number generator seed for random weight initialization.
    
    Attributes
    -----------
    w_ : 1d-array
        Weights after fitting.
    errors_ : list
        Number of misclassifications (updates) in each epoch.
        
    """
    
    def __init__(self, eta = 0.01, n_iter = 50, random_state = 1):
        self.eta = eta
        self.n_iter = n_iter
        self.random_state = random_state
        
    def fit(self, X,y):
        """Fit training data.
        
        Parameters
        -----------
        X : {array-like}, shape = [n_samples, n_features]
            Training vectors, where n_samples is the number of samples and
            n_features is the number of features.
            
        y : array-like, shape = [n_samples]
            Target values.
            
        Returns
        --------
        
        self : object
        
        """
        rgen = np.random.RandomState(self.random_state)
        self.w_ = rgen.normal(loc = 0.0, scale = 0.01, size = 1 + X.shape[1])
        self.errors_ = []
    
        for _ in range(self.n_iter):
            errors = 0
            for xi, target in zip(X,y):
                update = self.eta * (target - self.predict(xi))
                self.w_[1:] += update * xi
                self.w_[0] += update
                errors += int(update != 0.0)
            self.errors_.append(errors)
        return self

    def net_input(self,X):
        """ Calculate net input """
        return np.dot(X, self.w_[1:]) + self.w_[0]
    
    def predict(self, X):
        """ Return class label after unit step """
        return np.where(self.net_input(X) >= 0.0, 1, -1)


# ===========================================================

# Data

import pandas as pd 

df = pd.read_csv('https://archive.ics.uci.edu/ml/'
                 'machine-learning-databases/iris/iris.data',
                 header = None)
df.tail()

## tail() function is used to get the last n rows. This function returns last n rows from the object based on position.

print(type(df))

df

# ============================================================

# Data Visualization

import matplotlib.pyplot as plt
import numpy as np

# select setosa and versicolor
y = df.iloc[0:100, 4].values     #iloc[row, col].values - in the form of array
y = np.where(y == 'Iris-setosa', -1, 1)

## loc in Pandas is label-based, which means that we have yo specify the name of the rows and cols that we need to filter out whereas 
## iloc in Pnadas is integer index- based, we have to specify rows and cols by their integer index.

# extract sepal length and petal length

X = df.iloc[0:100,[0,2]].values

# plot data

plt.scatter(X[:50, 0], X[:50, 1],
            color = 'red', marker = 'o', label = 'setosa')
plt.scatter(X[50:100, 0], X[50:100, 1],
            color = 'blue', marker = 'x', label = 'versicolor')

plt.xlabel(' sepal length [cm] ')
plt.ylabel(' petal length [cm] ')

plt.legend(loc = 'upper left')
plt.show()

# ================================================================

# Apply the algorithm 

ppn = Perceptron(eta = 0.01, n_iter = 10)
ppn.fit(X,y)
plt.plot(range(1,len(ppn.errors_) + 1),ppn.errors_, marker = 'o') #plot(x, y, ..)
plt.xlabel('Epochs')
plt.ylabel('Number of updates')
plt.show()

# ================================================================

# Plot the convergence for the algorithm

from matplotlib.colors import ListedColormap

def plot_decision_regions(X, y, classifier, resolution = 0.02):
    
    # setup marker generator and color map
    markers = ('s', 'x', 'o', '^', 'v')
    colors = ('red', 'blue', 'lightgreen', 'gray', 'cyan')
    cmap = ListedColormap(colors[:len(np.unique(y))])
    
    # plot the decision surface
    
    x1_min, x1_max = X[:, 0].min() - 1, X[:, 0].max() + 1
    x2_min, x2_max = X[:, 1].min() - 1, X[:, 1].max() + 1
    
## determine the minimum and maximum values for the two features 
## and use those features vectors to create a pair of grid arrays xx1 and xx2

    xx1, xx2 = np.meshgrid(np.arange(x1_min, x1_max, resolution),
                           np.arange(x2_min, x2_max, resolution))
## Since we trained preceptron classifier on two feature dimensions, we 
## need to flatten the grid arrays and create a matrix that has the same 
## number of columns as the Iris training subset so that we can use the 
## predict method to predict the class labels Z of the corresponding grid points.

    Z = classifier.predict(np.array([xx1.ravel(), xx2.ravel()]).T)
    Z = Z.reshape(xx1.shape)
    plt.contourf(xx1, xx2, Z, alpha=0.3, cmap=cmap)
    plt.xlim(xx1.min(), xx1.max())
    plt.ylim(xx2.min(), xx2.max())
    
    # plot class samples
    for idx, cl in enumerate(np.unique(y)):
        plt.scatter(x=X[y == cl, 0],
                    y=X[y == cl, 1],
                    alpha=0.8,
                    c=colors[idx],
                    marker=markers[idx],
                    label=cl,
                    edgecolor='black')

# ==================================================================

plot_decision_regions(X, y, classifier=ppn)
plt.xlabel(' sepal length [cm] ')
plt.ylabel(' petal length [cm] ')
plt.legend(loc = 'upper left')
plt()
